using Microsoft.Extensions.Configuration;

namespace AtlassianCloudBackupsLibrary
{
    using System;
    using System.IO;
    using System.Net;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Text;
    using System.Threading.Tasks;
    using Helpers;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// This class generalizes the backup of an Atlassian cloud service 
    /// 
    /// Currently, JIRA and Confluence are supported but others can be added on an as needed basis
    /// </summary>
    /// <typeparam name="T">The service type to backup</typeparam>
    public class BackupAtlassianService<T> : IBackupJob
    {
        private readonly IConfigurationSection _config;
        /// <summary>
        /// Log label this task will use for entries into the common log file generated by this tool
        /// </summary>
        private readonly string _logLabel = "Atlassian-Backup-Service";

        /// <summary>
        /// The Atlassian service type to back up with this task
        /// </summary>
        private readonly IAtlassianService _service;

        /// <summary>
        /// HttpClient instance
        /// 
        /// Configured fully in the Client property
        /// </summary>
        private HttpClient _client;

        /// <summary>
        /// Cookie jar instance for the HttpClient
        /// 
        /// Used to store cookies from HTTP requests and pass them along on subsequent requests
        /// </summary>
        private CookieContainer _cookieJar;

        /// <summary>
        /// HttpClient instance property
        /// </summary>
        private HttpClient Client
        {
            get
            {
                if (_client == null)
                {
                    if (_cookieJar == null)
                    {
                        _cookieJar = new CookieContainer();
                    }

                    // Enable the client to use cookies
                    _client = new HttpClient(new HttpClientHandler
                    {
                        CookieContainer = _cookieJar,
                        UseCookies = true,
                        UseDefaultCredentials = false
                    });
                }
                return _client;
            }
        }

        /// <summary>
        /// The Atlassian cloud service account to back up
        /// </summary>
        public string Account { get; set; }

        /// <summary>
        /// Username with administration rights to the cloud instance
        /// </summary>
        public string UserName { get; set; }

        /// <summary>
        /// User's password
        /// </summary>
        public string Password { get; set; }

        /// <summary>
        /// That location the backup should be downloaded to
        /// </summary>
        public string BackupDestination => _config["destination"];

        /// <summary>
        /// The filename of the backup in the target destination
        /// </summary>
        public string FileName => _config["fileName"];

        /// <summary>
        /// An anonymous delegate that can be used to run tasks prior to the execution of the backup,
        /// such as a NET USE command or archiving old logs
        /// </summary>
        public Func<IConfigurationSection, Task> PrepareFunction { get; set; }

        /// <summary>
        /// An anonymous delegate that can be used to run tasks after the execution of the backup, 
        /// such as archiving old backups or sending an email
        /// </summary>
        public Func<IConfigurationSection, Task> CleanUpFunction { get; set; }

        /// <summary>
        /// The maximum age of backups to keep in days
        /// </summary>
        public int MaxBackupAge => int.Parse(_config["backupsToKeep"]);

        /// <summary>
        /// The maximum age of archived backups to keep in days
        /// </summary>
        public int MaxAgeArchivedBackups => int.Parse(_config["maxAgeArchivedBackups"]);

        public BackupAtlassianService(IConfigurationSection config)
        {
            _config = config;
            // Store the service type for later use
            _service = (IAtlassianService)Activator.CreateInstance(typeof(T));
        }

        /// <summary>
        /// Task for setting up the system to preform and receive the back up from the service
        /// 
        /// For example, archiving old logs, checking for available free space, etc.
        /// </summary>
        /// <returns>Awaitable BackupAtlassianService instance</returns>
        public async Task<IBackupJob> Prepare()
        {
            if (PrepareFunction != null)
            {
                await PrepareFunction(_config);
            }
            return this;
        }

        /// <summary>
        /// The actual work to get the backup from the remote service
        /// </summary>
        /// <returns>Awaitable BackupAtlassianService instance</returns>
        public async Task<IBackupJob> Execute(bool runCleanUpOnly = false)
        {
            if (!runCleanUpOnly)
            {
                Logger.Current.Log(_logLabel,
                    string.Format("Beginning backup for {0}...", GetServiceToBeBackedUpLabel()));

                await Prepare();

                using (Client)
                {
                    Client.BaseAddress = new Uri(string.Format(_service.BaseUrl, Account));
                    Client.DefaultRequestHeaders.Accept.Clear();
                    Client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                    var basicHeaderValue = Convert.ToBase64String(Encoding.UTF8.GetBytes($"{UserName}:{Password}"));
                    Client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", basicHeaderValue);

                    Logger.Current.Log(_logLabel, "Triggering backup...");
                    // Trigger backup
                    var triggerContent =
                        new StringContent("{ \"cbAttachments\" : \"true\", \"exportToCloud\" : \"true\" }",
                            Encoding.UTF8, "application/json");
                    var triggerResponse = await Client.PostAsync(_service.BackupTriggerUrl, triggerContent);

                    if (!triggerResponse.IsSuccessStatusCode)
                    {
                        var resultBody = triggerResponse.Content.ReadAsStringAsync().Result;
                        Logger.Current.Log(_logLabel,
                            string.Format("Failed to trigger backup generation! Reason : {0}", resultBody));
                    }
                    else
                    {
                        Logger.Current.Log(_logLabel, "Backup generation triggered successfully.");
                    }

                    var backupFileName = string.Empty;
                    var backupCreated = false;

                    while (!backupCreated)
                    {
                        var getBackupProgressResponse = await Client.GetAsync(_service.BackupProgressUrl);

                        if (getBackupProgressResponse.IsSuccessStatusCode)
                        {
                            var resultBody = getBackupProgressResponse.Content.ReadAsStringAsync();
                            var body = JObject.Parse(resultBody.Result);

                            var currentStatus = body["currentStatus"].ToString();
                            var estimatedProgress = body["alternativePercentage"].ToString();
                            var fileNamePropExists = body["fileName"] != null;

                            Logger.Current.Log(_logLabel, currentStatus + " ==> " + estimatedProgress);

                            if (fileNamePropExists)
                            {
                                backupFileName = body["fileName"].ToString();
                                backupCreated = true;

                                Logger.Current.Log(_logLabel, "Backup file generation complete.");
                            }
                        }

                        System.Threading.Thread.Sleep(5000);
                    }

                    Logger.Current.Log(_logLabel,
                        string.Format("Getting generated backup file from {0}",
                            string.Format(_service.BaseUrl, Account) + _service.DownloadUrlBase + backupFileName));
                    // Download the backup
                    using (var fileResponse = await Client.GetAsync(_service.DownloadUrlBase + backupFileName,
                        HttpCompletionOption.ResponseHeadersRead))
                    {
                        Logger.Current.Log(_logLabel,
                            string.Format("Downloading {0} bytes of data...",
                                fileResponse.Content.Headers.ContentLength));

                        using (var stream = await fileResponse.Content.ReadAsStreamAsync())
                        {
                            using (var outStream =
                                File.Open(
                                    Path.Combine(BackupDestination,
                                        string.Format(FileName, DateTime.Now.ToString("MMddyy"))), FileMode.Create))
                            {
                                await stream.CopyToAsync(outStream);
                            }
                        }
                    }

                    Logger.Current.Log(_logLabel, "Download complete.");
                    Logger.Current.Log(_logLabel, "Backup complete.");
                }
            }

            await CleanUp();

            return this;
        }

        /// <summary>
        /// Task for perfoming cleanup such as archiving old backups or log files
        /// </summary>
        public async Task<IBackupJob> CleanUp()
        {
            if (CleanUpFunction != null)
            {
                await CleanUpFunction(_config);
            }
            return this;
        }

        /// <summary>
        /// Returns the label for the service this task is backing up
        /// </summary>
        /// <returns></returns>
        private string GetServiceToBeBackedUpLabel()
        {
            var serviceToBeBackedUp = string.Empty;

            switch (typeof(T).Name)
            {
                case "JIRAService":
                    serviceToBeBackedUp = "JIRA";
                    break;
                case "ConfluenceService":
                    serviceToBeBackedUp = "Confluence";
                    break;
                default:
                    serviceToBeBackedUp = "unknown service";
                    break;
            }

            return serviceToBeBackedUp;
        }
    }
}
